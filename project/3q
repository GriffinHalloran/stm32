#include <stm32f30x.h>  // Pull in include files for F30x standard drivers 
#include <f3d_led.h>     // Pull in include file for the local drivers
#include <f3d_uart.h>
#include <f3d_gyro.h>
#include <f3d_lcd_sd.h>
#include <f3d_i2c.h>
#include <f3d_accel.h>
#include <f3d_mag.h>
#include <f3d_nunchuk.h>
#include <f3d_rtc.h>
#include <f3d_systick.h>
#include <ff.h>
#include <diskio.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdint.h>
#include <f3d_user_btn.h> 

#define TIMER 20000
#define AUDIOBUFSIZE 128

extern uint8_t Audiobuf[AUDIOBUFSIZE];
extern int audioplayerHalf;
extern int audioplayerWhole;

FATFS Fatfs;		/* File system object */
FIL fid;		/* File object */
BYTE Buff[512];		/* File read buffer */
int ret;
nunchuk_t nun;

struct ckhd {
  uint32_t ckID;
  uint32_t cksize;
};

struct fmtck {
  uint16_t wFormatTag;      
  uint16_t nChannels;
  uint32_t nSamplesPerSec;
  uint32_t nAvgBytesPerSec;
  uint16_t nBlockAlign;
  uint16_t wBitsPerSample;
};

void readckhd(FIL *fid, struct ckhd *hd, uint32_t ckID) {
  f_read(fid, hd, sizeof(struct ckhd), &ret);
  if (ret != sizeof(struct ckhd))
    exit(-1);
  if (ckID && (ckID != hd->ckID))
    exit(-1);
}

void die (FRESULT rc) {
  printf("Failed with rc=%u.\n", rc);
  while (1);
}

int audio(char p[]) {
  FRESULT rc;                   /* Result code */
  DIR dir;                      /* Directory object */
  FILINFO fno;                  /* File information object */
  UINT bw, br;
  unsigned int retval;
  int bytesread;


  printf("Reset\n"); 
  f_mount(0, &Fatfs);/* Register volume work area */

  rc = f_open(&fid, p, FA_READ);
  if (rc) die(rc);  
  if (!rc) {
    struct ckhd hd;
    uint32_t  waveid;
    struct fmtck fck;
    
    readckhd(&fid, &hd, 'FFIR');
    
    f_read(&fid, &waveid, sizeof(waveid), &ret);
    if ((ret != sizeof(waveid)) || (waveid != 'EVAW'))
      return -1;
    
    readckhd(&fid, &hd, ' tmf');
    
    f_read(&fid, &fck, sizeof(fck), &ret);
    
    // skip over extra info
        
    if (hd.cksize != 16) {
        printf("extra header info %d\n", hd.cksize - 16);
        f_lseek(&fid, hd.cksize - 16);
    }
                                
    printf("audio format 0x%x\n", fck.wFormatTag);
    printf("channels %d\n", fck.nChannels);
    printf("sample rate %d\n", fck.nSamplesPerSec);
    printf("data rate %d\n", fck.nAvgBytesPerSec);
    printf("block alignment %d\n", fck.nBlockAlign);
    printf("bits per sample %d\n", fck.wBitsPerSample);
                                              
    // now skip all non-data chunks !
                                                       
    while(1){
        readckhd(&fid, &hd, 0);
        if (hd.ckID == 'atad')
            break;
        f_lseek(&fid, hd.cksize);
        }
                                                                                                         
    printf("Samples %d\n", hd.cksize);

    // Play it !
    //      audioplayerInit(fck.nSamplesPerSec);

    f_read(&fid, Audiobuf, AUDIOBUFSIZE, &ret);
    hd.cksize -= ret;
    audioplayerStart();
    while (hd.cksize) {
      int next = hd.cksize > AUDIOBUFSIZE/2 ? AUDIOBUFSIZE/2 : hd.cksize;
      if (audioplayerHalf) {
        if (next < AUDIOBUFSIZE/2)
          bzero(Audiobuf, AUDIOBUFSIZE/2);
        f_read(&fid, Audiobuf, next, &ret);
        hd.cksize -= ret;
        audioplayerHalf = 0;
      }
      if (audioplayerWhole) {
        if (next < AUDIOBUFSIZE/2)
          bzero(&Audiobuf[AUDIOBUFSIZE/2], AUDIOBUFSIZE/2);
        f_read(&fid, &Audiobuf[AUDIOBUFSIZE/2], next, &ret);
        hd.cksize -= ret;
        audioplayerWhole = 0;
      }
    }
    audioplayerStop();
  }

  printf("\nClose the file.\n"); 
  rc = f_close(&fid);

  if (rc) die(rc);
}


int draw_ball(int g, int i) {
	int q;
	int r;
	for(q = 0; q < 5; q++) {
		for(r = 0;r <  5; r++){
			f3d_lcd_drawPixel(g + r, i + q, WHITE);
		}
	}

}

void draw_level_1(void) {
  f3d_lcd_fillScreen(GREEN);
  f3d_lcd_drawString(42, 1, "LEVEL 1", BLACK, GREEN);
  
  int i;
  int g;
  for (i = 10; i <15; i++) {
	for (g = 0; g < 150; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
 
  for(i = 80; i < 120; i++) {
	    for(g = 30; g < 40; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
  }
  for(i = 110; i < 120; i++) {
	for(g = 40; g < 80; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}


  for (i = 50; i <60; i++) {
	for (g = 80; g < 150; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}

	draw_ball(10, 150);

	
	for(i = 27; i < 45; i++) {
		for(g = 90; g < 93; g++) {
			f3d_lcd_drawPixel(g, i, YELLOW);
		}
	}

	for(i = 45; i < 47; i++) {
		for(g = 87; g < 97; g++) {
			f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
	for(i = 27; i < 31; i++) {
		for(g = 93; g < 100; g++) {
			f3d_lcd_drawPixel(g, i, RED);
		}
	} 
}

int draw_level_2(void) {
  int i;
  int g;
  f3d_lcd_fillScreen(GREEN);
  f3d_lcd_drawString(42, 1, "LEVEL 2", BLACK, GREEN);


  for (i = 10; i <15; i++) {
	for (g = 0; g < 150; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
 
  for (i = 80; i <90; i++) {
	for (g = 0; g < 90; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
  
  for (i = 120; i <160; i++) {
	for (g = 40; g < 50; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
  for (i = 15; i <35; i++) {
	for (g = 60; g < 70; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}

	for(i = 38; i < 55; i++) {
		for(g = 20; g < 23; g++) {
			f3d_lcd_drawPixel(g, i, YELLOW);
		}
	}

	for(i = 55; i < 57; i++) {
		for(g = 17; g < 27; g++) {
			f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
	for(i = 38; i < 42; i++) {
		for(g = 23; g < 30; g++) {
			f3d_lcd_drawPixel(g, i, RED);
		}
	}
	draw_ball(10, 150);
	return 17, 27, 55, 57;
}

int draw_level_3(void) {
  int i;
  int g;
  f3d_lcd_fillScreen(GREEN);
  f3d_lcd_drawString(42, 1, "LEVEL 3", BLACK, GREEN);


  for (i = 10; i <15; i++) {
	for (g = 0; g < 150; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}

   for (i = 60; i <160; i++) {
	for (g = 30; g < 40; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
   for (i = 60; i <120; i++) {
	for (g = 80; g < 90; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}

   for (i = 60; i <70; i++) {
	for (g = 40; g < 90; g++) {
		f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
   draw_ball(10, 150);

	
	
	for(i = 75; i < 93; i++) {
		for(g = 60; g < 63; g++) {
			f3d_lcd_drawPixel(g, i, YELLOW);
		}
	}

	for(i = 93; i < 95; i++) {
		for(g = 57; g < 67; g++) {
			f3d_lcd_drawPixel(g, i, BLACK);
		}
	}
	for(i = 75; i < 79; i++) {
		for(g = 63; g < 70; g++) {
			f3d_lcd_drawPixel(g, i, RED);
		}
	} 
} 
int draw_lines(int g, int i) {
	
    float mag[3] = {};
    float acc[3] = {};
    
    float heading1;  
    int yval = i;
    i = 0;
    int y;
    int q = 0;
    int p = 0; 
    while(1){
	delay(10);
	f3d_accel_read(acc);
        f3d_mag_read(mag);
      	for (i = 0; i < 3; i++){ 
		mag[i] = mag[i]* (180/M_PI);
	}
		
	 heading1 = atan2(mag[1],mag[0])*(180/M_PI);
	 printf("heading: %f\n", heading1);
	if(heading1 >= -46 && heading1 <= 4.99){ // controls ball heading so these statments need to be our predefined angles 
		//SOUTH
		q = yval + 5;
		p = yval + 10;
		for(q;q < p; q++) {
			f3d_lcd_drawPixel(g + 2, q, RED);
		}        
        	if(user_btn_read()) {return 1;} 
        }else {
		//SOUTH
		q = yval + 5;
		p = yval + 10;
		for(q;q < p; q++) {
			f3d_lcd_drawPixel(g + 2, q, GREEN);
		}        
 	
        }if (heading1 >= -90 && heading1 <= -45.99) {
		//SW
		q = g;
		p = q - 10;
		y = yval + 5;
		for(q; q > p; q--) {
			f3d_lcd_drawPixel(q, y, RED);
			y++;
		}
         if(user_btn_read()) {return 2;} 
		 
			
	} else {
		q = g;
		p = q - 10;
		y = yval+ 5;
		for(q; q > p; q--) {
			f3d_lcd_drawPixel(q, y, GREEN);
			y++;
		}
	}if (heading1 >= 5  && heading1 <= 69.99) {
		//SE
		q = g + 5;
		p = q + 10;
		y = yval + 5;
		for(q; q < p; q++) {
			f3d_lcd_drawPixel(q, y, RED);
			y++;
		}
         	if(user_btn_read()) {return 3;} 
		 
	} else {
		q = g + 5;
		p = q + 10;
		y = yval+ 5;
		for(q; q < p; q++) {
			f3d_lcd_drawPixel(q, y, GREEN);
			y++;
		}
	}if(heading1 >= 70 && heading1 <= 122.99){
		//EAST
		q = g+5;
		p = q + 10;
        	for(q; q < p; q++) {
			f3d_lcd_drawPixel(q, yval + 2, RED);
		} 
		 if(user_btn_read()) {return 4;} 
		 
        }else {
		q = g+5;
		p = q + 10;
        	for(q; q < p; q++) {
			f3d_lcd_drawPixel(q, yval + 2, GREEN);
		} 
        }if(heading1 >= 123 && heading1 <= 143.99) {
		//NE
		q = yval;
		p = q - 10;
		y = g + 5;
		for(q; q > p; q--) {
			f3d_lcd_drawPixel(y, q, RED);
			y++;
		}
		if(user_btn_read()) {return 5; }
			
	} else {
		q = yval;
		p = q - 10;
		y = g+ 5;
		for(q; q > p; q--) {
			f3d_lcd_drawPixel(y, q, GREEN);
			y++;
		}
	}if((heading1 <= 180.00 && heading1 >=144)){
		//NORTH
		q = yval;
		p = q - 10;
        	for(q; q > p; q--) {
			f3d_lcd_drawPixel(g + 2, q, RED);
		} 
		if(user_btn_read()) {return 6;} 
		 
        }else {
		q = yval;
		p = q - 10;
        	for(q; q > p; q--) {
			f3d_lcd_drawPixel(g+2, q, GREEN);
		} 
        }if(heading1 >= -140.99 && heading1 <= -89.99){
		//WEST
        	q = g;
		p = q - 10;
        	for(q; q > p; q--) {
			f3d_lcd_drawPixel(q, yval + 2, RED);
		}
		if(user_btn_read()) {return 7;} 
		 
        }else {
		q = g;
		p = q - 10;
        	for(q; q > p; q--) {
			f3d_lcd_drawPixel(q, yval + 2, GREEN);
		} 
	}if (heading1 <= -141 && heading1 >= -179.99) {
		//SW
		q = yval;
		p = q - 10;
		y = g;
		for(q; q > p; q--) {
			f3d_lcd_drawPixel(y, q, RED);
			y--;
		}
	
		 if(user_btn_read()) {return 8;} 

			
	} else {
		q = yval;
		p = q - 10;
		y = g;
		for(q; q > p; q--) {
			f3d_lcd_drawPixel(y, q, GREEN);
			y--;
		}
	}
   }
}

int move_ball(ing angle, int g, int i){
	printf("here");
	return 10, 150;
	
}

int play_level_2() {
    int ball_g = 10;
    int ball_i = 150;
    int endx, endx2, endy, endy2, angle;
    endx, endx2, endy, endy2 = draw_level_2();
    while(ball_g > endx && ball_g < endx2 && ball_i > endy && ball_i < endy2) {
    	angle = draw_lines(ball_g, ball_i);
	ball_g, ball_i = move_ball(angle, ball_g, ball_i);
 	}   
}

int main_screen(void) {
  f3d_lcd_fillScreen(WHITE);
  f3d_lcd_drawString(42, 10, "MINI GOLF", BLACK, WHITE);
  printf("in main screen\n");
  int level = 1;
  while(1) {
	delay(20);
	printf("jy %d\n", nun.jy);
	printf("level %d\n", level);
        f3d_nunchuk_read(&nun);
    if (nun.jy == 255){
	level--;
	if (level == 0) level = 3;
	}
    else if (nun.jy == 0) {
	printf("here");
	level++;
	if(level == 4) level = 1;
	}
    if(level == 2){ 
		f3d_lcd_drawString(40, 110, "LEVEL 2", YELLOW, WHITE);
		if(nun.c == 1 || nun.z == 1){
			f3d_lcd_fillScreen(WHITE);
			play_level_2();
		}
	} else {
                  f3d_lcd_drawString(40,110, "LEVEL 2", BLACK, WHITE);
	} 
    if(level == 1){ 
        f3d_lcd_drawString(40, 100, "LEVEL 1", YELLOW, WHITE);
		if(nun.c == 1 || nun.z == 1){
			f3d_lcd_fillScreen(WHITE);
			draw_level_1();
			return;
		}
	} else {
          f3d_lcd_drawString(40, 100, "LEVEL 1", BLACK, WHITE);
	} 
	  if(level == 3){ 
           	f3d_lcd_drawString(40, 120, "LEVEL 3", YELLOW, WHITE);
		if(nun.c == 1 || nun.z == 1){
			f3d_lcd_fillScreen(WHITE);
			draw_level_3();
			return;
		}
	} else {
 		  f3d_lcd_drawString(40, 120, "LEVEL 3", BLACK, WHITE);
	} 

  }


}  


   

		
int main(void) {
  clock_t t;
  setvbuf(stdin, NULL, _IONBF, 0);
  setvbuf(stdout, NULL, _IONBF, 0);
  setvbuf(stderr, NULL, _IONBF, 0);

  f3d_uart_init();
  f3d_timer2_init();
  f3d_lcd_init();
  f3d_dac_init();
  f3d_i2c1_init();
  f3d_accel_init();
  f3d_delay_init();
  f3d_rtc_init();
  f3d_systick_init();
  f3d_user_btn_init();
  f3d_gyro_init();
  f3d_mag_init(); 
  
  printf("before reading nunchuk\n");
  f3d_nunchuk_init();
  printf("after reading nunchuk\n");
  int i = 0;
  int ball_g = 10;
  int ball_i = 150;

  

  main_screen();
  draw_lines(ball_g, ball_i);
  printf("HELLO");
}

#ifdef USE_FULL_ASSERT
void assert_failed(uint8_t* file, uint32_t line) {
    /* Infinite loop */
    /* Use GDB to find out why we're here */
  while (1);
}
#endif
